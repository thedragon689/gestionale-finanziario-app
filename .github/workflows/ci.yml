name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Frontend Testing and Building
  frontend:
    name: 🎨 Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📥 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: 🔍 Lint frontend code
      working-directory: ./frontend
      run: npm run lint
      
    - name: 🧪 Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: 📦 Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  # Core Banking Service Testing
  core-banking:
    name: 🏦 Core Banking
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: core-banking/package-lock.json
        
    - name: 📥 Install core-banking dependencies
      working-directory: ./core-banking
      run: npm ci
      
    - name: 🔍 Lint core-banking code
      working-directory: ./core-banking
      run: npm run lint
      
    - name: 🧪 Run core-banking tests
      working-directory: ./core-banking
      run: npm test

  # Cryptocurrency Service Testing
  cryptocurrency:
    name: 🪙 Cryptocurrency
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: cryptocurrency/package-lock.json
        
    - name: 📥 Install cryptocurrency dependencies
      working-directory: ./cryptocurrency
      run: npm ci
      
    - name: 🔍 Lint cryptocurrency code
      working-directory: ./cryptocurrency
      run: npm run lint
      
    - name: 🧪 Run cryptocurrency tests
      working-directory: ./cryptocurrency
      run: npm test

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level=moderate
      
    - name: 🔒 Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Docker Build and Test
  docker:
    name: 🐳 Docker
    runs-on: ubuntu-latest
    needs: [frontend, core-banking, cryptocurrency]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔍 Lint Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: |
          frontend/Dockerfile
          core-banking/Dockerfile
          cryptocurrency/Dockerfile
          
    - name: 🏗️ Build Docker images
      run: |
        docker build -t gestionale-frontend ./frontend
        docker build -t gestionale-core-banking ./core-banking
        docker build -t gestionale-cryptocurrency ./cryptocurrency

  # Integration Tests
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🧪 Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Notify on Success/Failure
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
    - name: 📢 Notify on success
      if: needs.deploy-staging.result == 'success'
      run: |
        echo "✅ All tests passed and deployment successful!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: 📢 Notify on failure
      if: needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Tests failed or deployment failed!"
        # Add notification logic here (Slack, email, etc.)

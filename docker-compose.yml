version: '3.8'

services:
  # Database principale PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gestionale_postgres
    environment:
      POSTGRES_DB: gestionale_finanziario
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - gestionale_network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: gestionale_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gestionale_network

  # MongoDB per documenti
  mongodb:
    image: mongo:7
    container_name: gestionale_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo_password_123}
      MONGO_INITDB_DATABASE: gestionale_docs
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - gestionale_network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: gestionale_api_gateway
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET:-super_secret_jwt_key}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Core Banking Service
  core-banking:
    build:
      context: ./core-banking
      dockerfile: Dockerfile
    container_name: gestionale_core_banking
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Customer Management Service
  customer-management:
    build:
      context: ./customer-management
      dockerfile: Dockerfile
    container_name: gestionale_customer_management
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Investment Portfolio Service
  investment-portfolio:
    build:
      context: ./investment-portfolio
      dockerfile: Dockerfile
    container_name: gestionale_investment_portfolio
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Lending & Mortgage Service
  lending-mortgage:
    build:
      context: ./lending-mortgage
      dockerfile: Dockerfile
    container_name: gestionale_lending_mortgage
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Payment Processing Service
  payment-processing:
    build:
      context: ./payment-processing
      dockerfile: Dockerfile
    container_name: gestionale_payment_processing
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Cryptocurrency Service
  cryptocurrency:
    build:
      context: ./cryptocurrency
      dockerfile: Dockerfile
    container_name: gestionale_cryptocurrency
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - BITCOIN_RPC_URL=${BITCOIN_RPC_URL}
      - BITCOIN_RPC_USER=${BITCOIN_RPC_USER}
      - BITCOIN_RPC_PASSWORD=${BITCOIN_RPC_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Compliance & Audit Service
  compliance-audit:
    build:
      context: ./compliance-audit
      dockerfile: Dockerfile
    container_name: gestionale_compliance_audit
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - MONGODB_URL=mongodb://admin:${MONGO_PASSWORD:-mongo_password_123}@mongodb:27017/gestionale_docs
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - gestionale_network

  # Security & Access Service
  security-access:
    build:
      context: ./security-access
      dockerfile: Dockerfile
    container_name: gestionale_security_access
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-super_secret_jwt_key}
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Reporting & Analytics Service
  reporting-analytics:
    build:
      context: ./reporting-analytics
      dockerfile: Dockerfile
    container_name: gestionale_reporting_analytics
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - MONGODB_URL=mongodb://admin:${MONGO_PASSWORD:-mongo_password_123}@mongodb:27017/gestionale_docs
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - gestionale_network

  # AI & Automation Service
  ai-automation:
    build:
      context: ./ai-automation
      dockerfile: Dockerfile
    container_name: gestionale_ai_automation
    environment:
      - NODE_ENV=production
      - PORT=3011
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD:-secure_password_123}@postgres:5432/gestionale_finanziario
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - gestionale_network

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gestionale_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - gestionale_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gestionale_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - gestionale_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gestionale_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - gestionale_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: gestionale_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - gestionale_network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  gestionale_network:
    driver: bridge
